/*! \file adapter.h
 *  \brief Заголовочный файл с описанием класса Adapter
 *  \details Содержит объявление абстрактного класса Adapter, представляющего
 *           сетевой или периферийный адаптер с параметрами интерфейса подключения
 *           и пропускной способности. Класс наследует Device и задаёт контракт для
 *           конкретных адаптеров (WiFi, Bluetooth и т.д.), требуя реализации методов
 *           управления типом интерфейса и скорости передачи данных.
 */
#ifndef ADAPTER
#define ADAPTER

#include <iostream>
#include <string>
#include "device.h"

/*! \class Adapter
 *  \brief Базовый интерфейс адаптеров подключения
 *  \details Adapter расширяет Device общим набором операций для адаптеров, которые
 *           устанавливают и возвращают строковое обозначение интерфейса подключения и управляют скоростью работы.
 *           Класс предназначен для наследования конкретными реализациями сетевых и
 *           периферийных адаптеров.
 */
class Adapter : public Device{
public:
    /*! \brief Виртуальный деструктор
     *  \details Обеспечивает корректное удаление производных реализаций через указатель
     *           на базовый тип Adapter.
     */
    virtual ~Adapter() = default;

    /*! \brief Установить интерфейс подключения адаптера
     *  \param connectionInterface Строка, описывающая интерфейс подключения
     *  \details Чисто виртуальная функция должна сохранять или конфигурировать тип интерфейса,
     *           используемого адаптером.
     */
    virtual void SetConnectionInterface(const std::string& connectionInterface) = 0;

    /*! \brief Получить строковое представление интерфейса подключения
     *  \return Строка с обозначением интерфейса подключения
     *  \details Возвращает ранее установленное значение интерфейса подключения.
     */
    virtual std::string GetConnectionInterface() const = 0;

    /*! \brief Установить рабочую скорость адаптера
     *  \param speed Скорость в Мбит/с
     *  \details Чисто виртуальная функция, позволяющая задать целевую пропускную способность.
     */
    virtual void SetSpeed(int) = 0;

    /*! \brief Получить текущую рабочую скорость адаптера
     *  \return Значение скорости в Мбит/с
     *  \details Возвращает текущее или сконфигурированное значение пропускной способности.
     */
    virtual int GetSpeed() const = 0;
};

#endif