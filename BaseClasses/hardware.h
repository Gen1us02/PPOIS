/*! \file hardware.h
 *  \brief Заголовочный файл с описанием класса Hardware
 *  \details Содержит объявление абстрактного базового класса Hardware, представляющего
 *           общий интерфейс для аппаратных компонентов системы. Класс управляет состоянием
 *           установки компонента и предоставляет простые операции установки и удаления.
 *           Предназначен для наследования классами, моделирующими реальные аппаратные устройства.
 */
#ifndef HARDWARE
#define HARDWARE

#include <string>

/*! \class Hardware
 *  \brief Базовый класс аппаратного компонента
 *  \details Hardware задаёт общий контракт для устройств, которые могут быть установлены
 *           или удалены в составе системы. Класс хранит флаг состояния установки и предоставляет
 *           методы для проверки состояния, установки и удаления компонента. Наследники
 *           могут расширять поведение, добавляя собственную инициализацию и освобождение ресурсов.
 */
class Hardware{
public:
    /*! \brief Виртуальный деструктор
     *  \details Обеспечивает корректное разрушение производных классов через указатель на базовый тип.
     */
    virtual ~Hardware() = default;

    /*! \brief Проверить, установлен ли компонент
     *  \return true если компонент установлен, false если отсутствует
     *  \details Метод возвращает текущее состояние флага установки компонента.
     */
    bool IsInstaled() const{
        return this->isInstalled_;
    };

    /*! \brief Установить компонент
     *  \details Выполняет установку компонента, изменяя внутренний флаг состояния.
     *           Если компонент уже установлен, вызов игнорируется.
     */
    void Install(){
        if(isInstalled_) return;
        this->isInstalled_ = true;
    }

    /*! \brief Удалить компонент
     *  \details Выполняет удаление компонента, изменяя внутренний флаг состояния.
     *           Если компонент уже отсутствует, вызов игнорируется.
     */
    void Uninstall(){
        if(!isInstalled_) return;
        this->isInstalled_ = false;
    }

protected:
    bool isInstalled_ {false}; /*!< Флаг состояния установки компонента */
};

#endif