/*! \file port.h
 *  \brief Заголовочный файл с описанием абстрактного класса Port
 *  \details Содержит объявление базового класса Port, представляющего интерфейс
 *           аппаратного порта для подключения устройств. Класс определяет общий
 *           контракт для подключения и отключения устройств, проверки совместимости
 *           и получения текстового представления типа порта. Предназначен для
 *           наследования конкретными реализациями портов (USB, HDMI, DisplayPort и т.д.).
 */
#ifndef PORT
#define PORT
#include "device.h"

/*! \class Port
 *  \brief Абстрактный базовый класс аппаратного порта
 *  \details Port определяет набор виртуальных методов для управления подключением
 *           устройств: подключить, отключить, проверить, может ли порт принять
 *           устройство, и получить строковое представление типа порта.
 */
class Port{
public:
    /*! \brief Виртуальный деструктор
     *  \details Обеспечивает корректное уничтожение производных объектов через указатель
     *           на базовый класс Port.
     */
    virtual ~Port() = default;

    /*! \brief Отключить устройство от порта
     *  \return true если устройство успешно отключено, false если порт был пуст
     */
    virtual bool DisconnectDevice() = 0;

    /*! \brief Проверить, занят ли порт
     *  \return true, если порт занят устройством, false если свободен
    */
    virtual bool IsOccupied() const = 0;

    /*! \brief Получить текстовое представление типа порта
     *  \return Строка с типом порта
     *  \details Чисто виртуальная функция, обязательная для реализации в производных классах,
     *           используется для получения типа порта.
     */
    virtual std::string GetType() const = 0;
};

#endif