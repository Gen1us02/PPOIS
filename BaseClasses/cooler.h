/*! \file cooler.h
 *  \brief Заголовочный файл с описанием интерфейса Cooler
 *  \details Содержит объявление абстрактного интерфейса Cooler, моделирующего вентиляторные
 *           устройства в системе. Класс задаёт контракт для управления минимальной и 
 *           максимальной скоростью, получения типа охладителя и предоставляет утилитарный
 *           метод для установки текущей скорости с текстовым описанием результата.
 */
#ifndef COOLER
#define COOLER
#include <iostream>
#include <string>

/*! \class Cooler
 *  \brief Абстрактный интерфейс вентиляторов и охладителей
 *  \details Cooler описывает поведение любого охладительного устройства: методы для
 *           задания и чтения минимальной и максимальной скорости, а также получение
 *           текстового идентификатора типа охладителя. Класс предназначен для
 *           наследования реальными реализациями кулеров корпуса, процессора или GPU.
 */
class Cooler {
public:
    /*! \brief Виртуальный деструктор
     *  \details Обеспечивает корректное уничтожение производных объектов через указатель
     *           на базовый класс Cooler.
     */
    virtual ~Cooler() = default;

    /*! \brief Установить минимальную допустимую скорость вентилятора
     *  \param speed Минимальная скорость в условных единицах (например об/мин)
     *  \details Чисто виртуальная функция, которую должны реализовать конкретные классы.
     */
    virtual void SetMinSpeed(int) = 0;

    /*! \brief Получить минимальную допустимую скорость вентилятора
     *  \return Минимальная скорость в тех же единицах, что и в SetMinSpeed
     */
    virtual int GetMinSpeed() const = 0;

    /*! \brief Установить максимальную допустимую скорость вентилятора
     *  \param speed Максимальная скорость в условных единицах (например об/мин)
     *  \details Чисто виртуальная функция, которую должны реализовать конкретные классы.
     */
    virtual void SetMaxSpeed(int) = 0;

    /*! \brief Получить максимальную допустимую скорость вентилятора
     *  \return Максимальная скорость в тех же единицах, что и в SetMaxSpeed
     */
    virtual int GetMaxSpeed() const = 0;

    /*! \brief Получить тип охладителя в виде строки
     *  \return Тип охладителя (например "CaseCooler", "CPUCooler", "GPUFan")
     *  \details Чисто виртуальная функция, обязательная для реализации в производных классах.
     */
    virtual std::string GetType() const = 0;

    /*! \brief Установить текущую скорость работы вентилятора и вернуть текстовый статус
     *  \param speed Желаемая скорость в об/мин
     *  \return Строка с указанием установленной скорости
     *  \details Виртуальный метод формирует строку статуса. Производные классы должны
     *           переопределить его реализацию.
     */
    virtual std::string SetCurrentSpeed(int speed) const = 0;
};

#endif
