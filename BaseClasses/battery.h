/*! \file battery.h
 *  \brief Заголовочный файл с описанием класса Battery
 *  \details Содержит объявление абстрактного интерфейса Battery, представляющего
 *           источник питания/батарею в системе. Класс задаёт методы для установки
 *           и получения выходного напряжения и типа батареи.
 */
#ifndef BATTERY
#define BATTERY

#include <string>

/*! \class Battery
 *  \brief Интерфейс батарей и источников питания
 *  \details Battery определяет базовый контракт для компонентов, которые предоставляют
 *           напряжение и имеют классификацию по типу. Методами интерфейса являются
 *           установка и чтение напряжения, а также установка и получение текстового типа.
 */
class Battery{
public:
    /*! \brief Виртуальный деструктор
     *  \details Обеспечивает корректное разрушение производных объектов через указатель
     *           на базовый тип Battery.
     */
    virtual ~Battery() = default;

    /*! \brief Установить выходное напряжение батареи
     *  \param voltage Напряжение в вольтах
     *  \details Метод должен быть реализован в производных классах для сохранения и
     *           проверки допустимых значений напряжения.
     */
    virtual void SetVoltage(int voltage);

    /*! \brief Получить текущее выходное напряжение батареи
     *  \return Значение напряжения в вольтах
     *  \details Метод должен быть реализован в производных классах для возврата текущего значения.
     */
    virtual int GetVoltage() const;

    /*! \brief Установить строковое обозначение типа батареи
     *  \param type Строка с типом
     *  \details Позволяет классифицировать источник питания по технологии или назначению.
     */
    virtual void SetType(const std::string& type);

    /*! \brief Получить строковое обозначение типа батареи
     *  \return Строка с типом батареи
     *  \details Должно возвращать ранее установленную строку типа или значение по умолчанию.
     */
    virtual std::string GetType() const;
};

#endif