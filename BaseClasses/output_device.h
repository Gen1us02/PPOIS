/*! \file output_device.h
 *  \brief Заголовочный файл с описанием класса OutputDevice
 *  \details Содержит объявление абстрактного класса OutputDevice, представляющего
 *           устройство вывода в системе. Класс наследует Device и задаёт интерфейс
 *           для приёма событий от устройств ввода и их текстового представления.
 *           Предназначен для реализации конкретных устройств вывода: дисплеев,
 *           проекторов и т.п., которые взаимодействуют с InputDevice.
 */
#ifndef ODEVICE
#define ODEVICE
#include <string>
#include "device.h"
#include "input_device.h"

/*! \class OutputDevice
 *  \brief Базовый класс для устройств вывода
 *  \details OutputDevice расширяет класс Device общим контрактом для устройств вывода,
 *           определяя чисто виртуальный метод DisplayInput для обработки входных событий
 *           от устройств ввода и формирования человекочитаемого описания события.
 */
class OutputDevice : public Device{
public:
    /*! \brief Виртуальный деструктор
     *  \details Обеспечивает корректное уничтожение производных классов через указатель
     *           на базовый тип OutputDevice.
     */
    virtual ~OutputDevice() = default;

    /*! \brief Обработать событие ввода и вернуть его текстовое представление
     *  \param inputDevice Ссылка на устройство ввода, сгенерировавшее событие
     *  \return Строка с описанием получённого ввода для отображения или логирования
     *  \details Чисто виртуальный метод обязан быть реализован в производных классах.
     *           Метод используется для имитации отображения действий пользователя на устройстве вывода.
     */
    virtual std::string DisplayInput(const InputDevice& inputDevice) const = 0;
};

#endif